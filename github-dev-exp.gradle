import com.smokejumperit.api.GitHubApi3

apply from:'http://smokejumperit.com/github-libs.gradle'

apply plugin:'java'
apply plugin:'maven'
apply plugin:'osgi'

buildscript {
	repositories {
		mavenLocal()
		mavenCentral()	
		mavenRepo url:'http://repo.smokejumperit.com'
		mavenRepo url:'http://repository.codehaus.org'
	}
	dependencies {
		classpath 'RobertFischer:github-api-3:0.0.2'
	}
}

task ghWritePom {
	ext.pom = uploadArchives.repositories.mavenDeployer.pom
	ext.pomFile = File.createTempFile("pom", "xml")
	doLast {
		pom.writeTo(pomFile)
	}
}

task ghUpload(dependsOn:[configurations.archives.allArtifacts, tasks.ghWritePom]) {
	ext.username = System.getProperty("github.username", System.getenv("GITHUB_USER")) ?: project.group ?: System.getProperty('user.name')
	ext.password = System.getProperty("github.password", System.getenv("GITHUB_PASS"))
	ext.repo = project.name

/*
	onlyIf { 
		if(version.endsWith("-SNAPSHOT")) {
			logger.warn("Not uploading to GitHub because we're releasing a snapshot version")
			return false
		} else {
			return true
		}
	}
*/

	onlyIf {
		if(!password) {
			logger.error(
				"Need password to upload to GitHub: set ghUpload task property 'password', Java property 'github.password', or system property 'GITHUB_PASS'"
			)
			return false
		} else {
			return true
		}
	}

	doLast {
		logger.info("Releasing to GitHub repository $username/$repo")
		def gitHub = new GitHubApi3(username, password, repo) 

		def fileBase = "$repo-$project.version"

		def downloads = gitHub.listDownloads()
		downloads.findAll { it.name.startsWith(fileBase) }.each {
			logger.info("Deleting download $it.id because its name starts with $fileBase: $it.name")
			it.delete()
		}

		def time = System.currentTimeMillis()
		def description = "$project.name $project.version $time (${new Date(time)})"
		configurations.archives.allArtifacts.files.each { File file ->
			logger.info("Uploading $file - $description")
			gitHub.createDownload(file, description)
		}

		logger.info("Uploading pom")
		gitHub.createDownload(tasks.ghWritePom.pomFile, "${project.name}-${project.version}.pom", "$project.name $project.version pom file ($time)")
	}
}

tasks.uploadArchives.dependsOn tasks.ghUpload
